Алгоритм  оточення
       1.П¶дготувати масив Work
                     A)Скоп¶ювати масив Original в  масив  Work
                     Б)Знищити  в  масив¶  Work  вс¶ л¶н¶№ оточення
       2.Перев¶рити чи можливе   оточення
       Прим¶тка:
У  зм¶нних  XPot  ¶  YPot  на  початку  роботи  функц¶й
збер¶гаються  координати  останньо№  поставлено№  точки.Очевидно, що вона буде
початком  контуру  оточення  (  контур  оточення  -  точки  як¶ беруть участь в
оточенн¶ ).Перев¶рку  можливост¶ оточення зд¶снюґ пара рекурсивних функ¶й
VRound_1   ¶   Connect,запускаґться ж перев¶рка можливост¶ оточення викликом
функц¶№  VRound яка збер¶гаґ значення зм¶нних XPot ¶ YPot оск¶льки функц¶№
VRound_1 ¶ Connect в процес¶ роботи зм¶нюють значення цих зм¶нних.Функц¶№
VRound_1 та Connect вид¶лен¶ в окрем¶ модул¶ тому що для програми або модуля
п¶д стек вид¶ляґться всього 64 Кб пам'ят¶ чого для перев¶рки можливост¶
оточення при великому контур¶ оточення може виявитись недостатньо.Параметрами
VRound_1 та Connect ґ вектори напрямку перев¶рки( 1,0-праворуч, 0,-1-вниз, 1,
1-вгору ¶ праворуч, ¶ т.д.).Функц¶№ VRound_1 та Connect зд¶йснюють оточення в
масив¶ Work який ґ коп¶ґю Original т¶льки без л¶н¶й що сполучають точки.
           ( VRound_1 )
            А)Поки вектор напрямку не опише коло робити
                   (Сonnect)
                   А1)Connect:=False
                   Б1)Якщо на даному напрямку ґ своя точка яка не з'ґднана ¶
не в¶докремлена л¶н¶ями тод¶:
                        а) сполучити №№
                        б) перем¶стити вказ¶вник XPot YPot на дану точку
                        в)викликати VRound_1 з вектором що вказуватиме на
попередню точку
                        г)якщо VRound_1=True тод¶ ¶ Connect:=True
                   (К¶нець Connect)
                   В1)Якщо Connect=True то ви х¶д з циклу
            Б)Якщо к¶льк¶сть л¶н¶й якими з'ґднана точка менше двох зробити
крок назад(тобто знищити дану точку ¶ перем¶ститись на попередню)
            В)Якщо к¶льк¶сть л¶н¶й якими з'ґднана точка не дор¶внюґ двом тод¶
VRound_1:=False.
                 Цей алгоритм перев¶ряґ чи можливе оточення починаючи з
заданого напрямку.В¶н знаходить оточення,але не обов'язково максимальне
(максимальне оточення отримаґмо тод¶ коли початковий напрямок перев¶рки буде
поза майбутн¶м оточенням).Тод¶ як алгоритму для обробки оточено№ частини
масиву необх¶дно щоб оточення було максимальним.Отже основна п¶дпрограма для
знаходження максимального оточення працюґ наступним чином.

            А)Вона зд¶йснюґ оточення для кожного напрямку ¶ знаходить
максимальне.
            Б)Якщо оточення не зд¶йснене то вих¶д з п¶дпрограми з сигналом про
неможлив¶сть оточення.
            В)Якщо к¶льк¶сть оточених точок дор¶внюґ нулю то координати
оточених порожн¶х м¶сць заносяться в стек (WorkSubStack),координати початку
оточення ¶ WorkSubStack заносяться у ¶нший стек(WorkStack),а сам¶ оточен¶
порожн¶ м¶сця маркуються спец¶альним символом(EmergyPlase)

            Г)Якщо ж к¶льк¶сть оточених точок не дор¶внюґ нулю то:
                   а)вс¶ порожн¶ оточен¶ м¶сця маркуються спец¶альним
символом(RoundedEmptyPlase),При п¶драхунку очок цей символ приймаґться як
порожнґ м¶сце,а при зд¶йсненн¶ ходу,як зайняте точкою.
                   б)оточена область коп¶юґться в ориг¶нальний масив(Original)
            Д)Вих¶д з п¶дпрограми з сигналом про зд¶йснене оточення
         3.Якщо можливе то в¶добразити його граф¶чно також п¶драхувати очки
гравц¶в ¶ вивести №х на екран